/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package capa_presentacion;
import java.sql.*;
import java.time.LocalDate;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

import capa_datos.Conexion;
import capa_negocio.FacturaReserva;
import capa_datos.*;


/**
 *
 * @author Iker
 */
public class FormularioPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form FormularioPrincipal
     */
    public FormularioPrincipal() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
    
        jLabelReserva = new javax.swing.JLabel();
        jLabelPrestamo = new javax.swing.JLabel();
        jLabelidEmpleado = new javax.swing.JLabel();
        jLabelPlaca = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabelNoDias = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePrincipal = new javax.swing.JTable();
        jTextFieldPrestamo = new javax.swing.JTextField();
        jTextFieldIdCliente = new javax.swing.JTextField();
        jTextFieldPlaca = new javax.swing.JTextField();
        jTextFieldIdEmpleado = new javax.swing.JTextField();
        jTextFieldNoDias = new javax.swing.JTextField();
        jButtonReservar = new javax.swing.JButton();
        jButtonModificar = new javax.swing.JButton();
        jButtonBorrar = new javax.swing.JButton();
        jButtonBuscar = new javax.swing.JButton();
        jButtonClientes = new javax.swing.JButton();
        jButtonEmpleado = new javax.swing.JButton();
        jButtonCarro = new javax.swing.JButton();
        jButtonSalir = new javax.swing.JButton();
        jButtonBuscarCliente = new javax.swing.JButton("🔍");
        jButtonBuscarPlaca = new javax.swing.JButton("🔍");
        jButtonBuscarEmpleado = new javax.swing.JButton("🔍");
    
        // Configuración para pantalla completa
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
    
        jLabelReserva.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabelReserva.setText("RESERVAR");
    
        jLabelPrestamo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabelPrestamo.setText("Fecha prestamo");
    
        jLabelidEmpleado.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabelidEmpleado.setText("Identificacion cliente");
    
        jLabelPlaca.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabelPlaca.setText("Placa carro");
    
        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Identificacion empleado");
    
        jLabelNoDias.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabelNoDias.setText("Numero de dias");
    
        jButtonBuscarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarCliente();
            }
        });
        
        jButtonBuscarPlaca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarPlaca();
            }
        });
        
        jButtonBuscarEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarEmpleado();
            }
        });
    
        jTablePrincipal.setDefaultEditor(Object.class, null);
        jTablePrincipal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {
    
            }
        ));
        jTablePrincipal.setRowHeight(25); // Filas más altas para mejor visualización
        jTablePrincipal.setFont(new java.awt.Font("Segoe UI", 0, 14)); // Letra más grande
        jScrollPane1.setViewportView(jTablePrincipal);
    
        jTablePrincipal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTablePrincipalMousePressed(evt);
            }
        });
    
        jTextFieldPrestamo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPrestamoActionPerformed(evt);
            }
        });
    
        jTextFieldIdCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldIdClienteActionPerformed(evt);
            }
        });
    
        jTextFieldPlaca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPlacaActionPerformed(evt);
            }
        });
    
        jButtonReservar.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButtonReservar.setText("Reservar");
        jButtonReservar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReservarActionPerformed(evt);
            }
        });
    
        jButtonModificar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButtonModificar.setText("Modificar");
        jButtonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModificarActionPerformed(evt);
            }
        });
    
        jButtonBorrar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButtonBorrar.setText("Borrar");
        jButtonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBorrarActionPerformed(evt);
            }
        });
    
        jButtonBuscar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButtonBuscar.setText("Buscar");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });
    
        jButtonClientes.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButtonClientes.setText("Crear clientes");
        jButtonClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClientesActionPerformed(evt);
            }
        });
    
        jButtonEmpleado.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButtonEmpleado.setText("Crear empleado");
        jButtonEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEmpleadoActionPerformed(evt);
            }
        });
    
        jButtonCarro.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButtonCarro.setText("Crear carro");
        jButtonCarro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCarroActionPerformed(evt);
            }
        });
    
        jButtonSalir.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButtonSalir.setText("Salir");
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });
    
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(30, 30, 30)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabelReserva)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelPrestamo)
                                .addComponent(jLabelidEmpleado)
                                .addComponent(jLabelPlaca)
                                .addComponent(jLabel5)
                                .addComponent(jLabelNoDias))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextFieldPrestamo)
                                .addComponent(jTextFieldIdCliente)
                                .addComponent(jTextFieldPlaca)
                                .addComponent(jTextFieldIdEmpleado)
                                .addComponent(jTextFieldNoDias, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButtonBuscarCliente)
                                .addComponent(jButtonBuscarPlaca)
                                .addComponent(jButtonBuscarEmpleado)))
                        .addComponent(jButtonReservar, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButtonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButtonModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButtonBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jButtonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonCarro, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(20, 20, 20)))
                    .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(30, 30, 30)
                    .addComponent(jLabelReserva)
                    .addGap(25, 25, 25)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabelPrestamo)
                                .addComponent(jTextFieldPrestamo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(15, 15, 15)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabelidEmpleado)
                                .addComponent(jTextFieldIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonBuscarCliente))
                            .addGap(15, 15, 15)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabelPlaca)
                                .addComponent(jTextFieldPlaca, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonBuscarPlaca))
                            .addGap(15, 15, 15)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(jTextFieldIdEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonBuscarEmpleado))
                            .addGap(15, 15, 15)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabelNoDias)
                                .addComponent(jTextFieldNoDias, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(25, 25, 25)
                            .addComponent(jButtonReservar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButtonClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(15, 15, 15)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jButtonCarro, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(15, 15, 15)
                    .addComponent(jButtonEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(15, 15, 15)
                    .addComponent(jButtonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(50, Short.MAX_VALUE))
        );
            
        pack();
    }

    private void jTextFieldPlacaActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    private void jTextFieldPrestamoActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:
    }                                                  

    private void jButtonBorrarActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        try {
            int filaSeleccionada = jTablePrincipal.getSelectedRow(); // Obtener la fila seleccionada
            if (filaSeleccionada == -1) {
                JOptionPane.showMessageDialog(null, "Seleccione una reserva para eliminar.");
                return; // Detener si no se selecciona nada
            }

            int codigoReserva = (int) jTablePrincipal.getValueAt(filaSeleccionada, 0); // Obtener el código de la reserva

            int Res = JOptionPane.showConfirmDialog(null, "¿Está seguro de eliminar la reserva con código " + codigoReserva + "?");
            if (Res == JOptionPane.YES_OPTION) {
                FacturaReserva objfactura = new FacturaReserva();
                objfactura.setCodigo(codigoReserva);
                JOptionPane.showMessageDialog(null, objfactura.EliminarReserva());

                // Recargar la tabla después de eliminar
                CargarReservasEnTabla(Integer.parseInt(this.jTextFieldIdCliente.getText()));
            }
        } catch (Exception e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(null, "Error al eliminar la reserva.");
        }
    }                                             

    private void jButtonModificarActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
        try {
    		int filaSeleccionada = jTablePrincipal.getSelectedRow(); // Obtener la fila seleccionada
            if (filaSeleccionada == -1) {
                JOptionPane.showMessageDialog(null, "Seleccione una reserva para modificar.");
                return; // No hacer nada si no se selecciona ninguna fila
            }

            int codigoReserva = (int) jTablePrincipal.getValueAt(filaSeleccionada, 0); // Obtener el código de la reserva
            FacturaReserva objReserva = new FacturaReserva();
            objReserva.setCodigo(codigoReserva); // Código de la reserva seleccionada
            objReserva.setFechaPrestamo(LocalDate.parse(this.jTextFieldPrestamo.getText())); // Convertir String a LocalDate
            objReserva.setIdCliente(Integer.parseInt(this.jTextFieldIdCliente.getText())); // Cliente ID como número
            objReserva.setIdEmpleado(Integer.parseInt(this.jTextFieldIdEmpleado.getText())); // Cliente ID como número
            objReserva.setCarroPlaca(this.jTextFieldPlaca.getText()); // Placa del carro
            objReserva.setDias(Integer.parseInt(this.jTextFieldNoDias.getText())); // Placa del carro
            String mensaje = objReserva.ActualizarReserva();
            
            JOptionPane.showMessageDialog(null, "La reserva ha sido modificada");
            CargarReservasEnTabla(Integer.parseInt(this.jTextFieldIdCliente.getText()));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No se logro modificar");
        }
    }                                                

    private void jTextFieldIdClienteActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO add your handling code here:
    }

    private void jButtonReservarActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
        try {
            // Verificar que todos los campos están llenos
            if (jTextFieldPrestamo.getText().isEmpty() || 
                jTextFieldIdCliente.getText().isEmpty() || 
                jTextFieldPlaca.getText().isEmpty() || 
                jTextFieldIdEmpleado.getText().isEmpty()||
                jTextFieldNoDias.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Todos los campos deben estar llenos.");
            } else {
                // Crear un objeto FacturaReserva con los datos ingresados
                
                FacturaReserva nuevaReserva = new FacturaReserva();
                nuevaReserva.setFechaReserva(LocalDate.now()); 
                nuevaReserva.setFechaPrestamo(LocalDate.parse(jTextFieldPrestamo.getText())); 
                nuevaReserva.setIdCliente(Integer.parseInt(jTextFieldIdCliente.getText())); 
                nuevaReserva.setCarroPlaca(jTextFieldPlaca.getText());
                nuevaReserva.setDias(Integer.parseInt(jTextFieldNoDias.getText())); // Guardar días
                nuevaReserva.setIdEmpleado(Integer.parseInt(jTextFieldIdEmpleado.getText())); 
            
                int total = nuevaReserva.getDias() * 178000; // Calcular totals
                nuevaReserva.GuardarReserva(); // Guardar en la BD

                // Actualizar el estado del carro a 'No Disponible' (0)
                Conexion objmod = new Conexion();
                String updateQuery = "UPDATE carros SET estado = 0 WHERE placa = '" + nuevaReserva.getCarroPlaca() + "'";
                objmod.Ejecutar(updateQuery);

                // Agregar la reserva a la tabla con el total
                DefaultTableModel modelo = (DefaultTableModel) jTablePrincipal.getModel();
                modelo.addRow(new Object[]{
                    nuevaReserva.getCodigo(), 
                    nuevaReserva.getFechaReserva(), 
                    nuevaReserva.getFechaPrestamo(), 
                    nuevaReserva.getIdCliente(), 
                    nuevaReserva.getCarroPlaca(),
                    total // Agregar el total en la columna correcta
                });
                CargarReservasEnTabla(Integer.parseInt(jTextFieldIdCliente.getText()));
                JOptionPane.showMessageDialog(null, "Reserva guardada correctamente.");
                LimpiarCajasTexto();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al realizar la reserva: " + e.getMessage());
        }
    }    
    
    private void LimpiarTabla() {
        DefaultTableModel modelo = (DefaultTableModel) jTablePrincipal.getModel();
        modelo.setRowCount(0); // Elimina todas las filas
    }
    public void LimpiarCajasTexto() {
        this.jTextFieldPrestamo.setText("");
        this.jTextFieldIdCliente.setText("");
        this.jTextFieldPlaca.setText("");
        this.jTextFieldIdEmpleado.setText("");
        this.jTextFieldNoDias.setText("");
    }
    /**
     * Carga las reservas de un cliente en la tabla.
     * @param idCliente El ID del cliente cuyas reservas se desean cargar.
     */
    private void CargarReservasEnTabla(int idCliente) {
        try {
            Conexion objmod = new Conexion();
            ResultSet tbl = objmod.Listar("SELECT * FROM facturareserva WHERE IdCliente = " + idCliente);

            // Crear modelo de la tabla con nombres de columnas
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("Código");
            modelo.addColumn("Fecha Reserva");
            modelo.addColumn("Fecha Préstamo");
            modelo.addColumn("Cliente ID");
            modelo.addColumn("Carro Placa");
            modelo.addColumn("Días Alquilados");
            modelo.addColumn("Total");

            // Llenar el modelo con los datos obtenidos de la base de datos
            boolean hayDatos = false;
            while (tbl.next()) {
                int dias = tbl.getInt("NumeroDias");
                int total = dias * 178000; // Calcular el total basado en el número de días

                Object[] fila = {
                    tbl.getInt("Codigo"),
                    tbl.getDate("FechaReserva"),
                    tbl.getDate("FechaPrestamo"),
                    tbl.getInt("IdCliente"),
                    tbl.getString("CarroPlaca"),
                    dias, // Agregar los días alquilados
                    total // Agregar el total calculado
                };
                modelo.addRow(fila);
                hayDatos = true;

                // Verificar que los datos se imprimen correctamente en la consola
                System.out.println("Código: " + tbl.getInt("Codigo") +
                        ", FechaReserva: " + tbl.getDate("FechaReserva") +
                        ", FechaPrestamo: " + tbl.getDate("FechaPrestamo") +
                        ", IdCliente: " + tbl.getInt("IdCliente") +
                        ", CarroPlaca: " + tbl.getString("CarroPlaca") +
                        ", Días Alquilados: " + dias +
                        ", Total: " + total);
            }

            tbl.close(); // Cerrar ResultSet

            // Si no hay datos, mostrar mensaje y salir
            if (!hayDatos) {
                JOptionPane.showMessageDialog(null, "El cliente no tiene reservas registradas.");
                return;
            }

            // Asignar el modelo a la tabla
            jTablePrincipal.setModel(modelo);
            modelo.fireTableDataChanged(); // Forzar actualización de la tabla

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al cargar las reservas: " + e.getMessage());
        }
    }

    private void buscarCliente() {
        try {
            Conexion objmod = new Conexion();
            ResultSet tbl = objmod.Listar("SELECT * FROM clientes");

            // Crear modelo de la tabla con nombres de columnas
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("Identificacion");
            modelo.addColumn("Nombre Completo");
            modelo.addColumn("Correo");
            modelo.addColumn("Telefono");
    
            // Llenar el modelo con los datos obtenidos de la base de datos
            boolean hayDatos = false;
            while (tbl.next()) {
                Object[] fila = {
                    tbl.getInt("idCliente"),
                    tbl.getString("nombreCompleto"),
                    tbl.getString("correo"),
                    tbl.getString("telefono"),
                };
                modelo.addRow(fila);
                hayDatos = true;
                }
                tbl.close(); // Cerrar ResultSet
                // Si no hay datos, mostrar mensaje y salir
                if (!hayDatos) {
                    JOptionPane.showMessageDialog(null, "No hay clientes creados");
                    return;
                }
    
                // Asignar el modelo a la tabla
                jTablePrincipal.setModel(modelo);
                modelo.fireTableDataChanged(); // Forzar actualización de la tabla
    
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error al cargar los clientes: " + e.getMessage());
            }
    }

    private void buscarPlaca() {
        try {
            Conexion objmod = new Conexion();
            ResultSet tbl = objmod.Listar("SELECT * FROM carros WHERE estado = '1'");

            // Crear modelo de la tabla con nombres de columnas
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("Placa");
            modelo.addColumn("Marca carro");
            modelo.addColumn("Kilometraje");
            modelo.addColumn("Modelo");
            modelo.addColumn("Linea");
            modelo.addColumn("Estado");
    
            // Llenar el modelo con los datos obtenidos de la base de datos
            boolean hayDatos = false;
            while (tbl.next()) {
                Object[] fila = {
                    tbl.getString("placa"),
                    tbl.getString("marcaCarro"),
                    tbl.getInt("kilometraje"),
                    tbl.getInt("modelo"),
                    tbl.getString("linea"),
                    tbl.getInt("estado") == 1 ? "Disponible" : "No Disponible"
                };
                modelo.addRow(fila);
                hayDatos = true;
                }
                tbl.close(); // Cerrar ResultSet
                // Si no hay datos, mostrar mensaje y salir
                if (!hayDatos) {
                    JOptionPane.showMessageDialog(null, "No hay carros creados");
                    return;
                }
                // Asignar el modelo a la tabla
                jTablePrincipal.setModel(modelo);
                modelo.fireTableDataChanged(); // Forzar actualización de la tabla

    
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error al cargar los carros: " + e.getMessage());
            }
    }                                                

    private void buscarEmpleado() {
        try {
            Conexion objmod = new Conexion();
            ResultSet tbl = objmod.Listar("SELECT * FROM empleados");

            // Crear modelo de la tabla con nombres de columnas
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("Identificacion");
            modelo.addColumn("Nombre Completo");
            modelo.addColumn("Rol");
    
            // Llenar el modelo con los datos obtenidos de la base de datos
            boolean hayDatos = false;
            while (tbl.next()) {
                Object[] fila = {
                    tbl.getInt("idEmpleado"),
                    tbl.getString("nombreCompleto"),
                    tbl.getString("rol")
                };
                modelo.addRow(fila);
                hayDatos = true;
                }
                tbl.close(); // Cerrar ResultSet
                // Si no hay datos, mostrar mensaje y salir
                if (!hayDatos) {
                    JOptionPane.showMessageDialog(null, "No hay empleados creados");
                    return;
                }
    
                // Asignar el modelo a la tabla
                jTablePrincipal.setModel(modelo);
                modelo.fireTableDataChanged(); // Forzar actualización de la tabla
    
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error al cargar los empleados: " + e.getMessage());
            }
    }

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {
        // Código para manejar la acción del botón "Clientes"
        try {
            // Verificar que el usuario ingresó un ID de cliente
            if (jTextFieldIdCliente.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Ingrese el ID del cliente para buscar sus reservas.");
                return;
            }
            // Obtener las reservas del cliente y mostrarlas en la tabla
            CargarReservasEnTabla(Integer.parseInt(this.jTextFieldIdCliente.getText()));
            // Agregar un listener para llenar los campos al seleccionar una fila
            jTablePrincipal.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mousePressed(java.awt.event.MouseEvent evt) {
                    int selectedRow = jTablePrincipal.getSelectedRow();
                    if (selectedRow != -1) {
                        jTextFieldPrestamo.setText(jTablePrincipal.getValueAt(selectedRow, 2).toString());
                        jTextFieldIdCliente.setText(jTablePrincipal.getValueAt(selectedRow, 3).toString());
                        jTextFieldPlaca.setText(jTablePrincipal.getValueAt(selectedRow, 4).toString());
                        jTextFieldNoDias.setText(jTablePrincipal.getValueAt(selectedRow, 5).toString());
                        jTextFieldIdEmpleado.setText(jTablePrincipal.getValueAt(selectedRow, 6).toString());
                    }
                }
            });
                return;

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al buscar las reservas del cliente: " + e.getMessage());
        }
    }

    private void jButtonClientesActionPerformed(java.awt.event.ActionEvent evt) {
        // Código para manejar la acción del botón "Clientes"
        SwingUtilities.invokeLater(() -> { // Ejecuta el código en el hilo de despacho de eventos
            JFrame frame = new JFrame("Formulario Clientes"); // Crea una ventana con el título "Formulario Clientes"
            Formulario_Clientes panel = new Formulario_Clientes(); // Crea una instancia del panel Formulario_Clientes
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Cierra la aplicación al presionar la "X"
            frame.setSize(1100, 500); //  tamaño de la ventana a 1100x500 
            frame.setContentPane(panel); // Agrega el panel Formulario_Clientes a la ventana
            frame.setVisible(true); // Muestra la ventana en pantalla
        });
    }

    private void jButtonEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {
        // Código para manejar la acción del botón "Clientes"
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Formulario Empleados");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.setSize(1100, 500);
            frame.setContentPane(new Formulario_Empleados());
            frame.setVisible(true);
        });
    }

    private void jButtonCarroActionPerformed(java.awt.event.ActionEvent evt) {
        // Código para manejar la acción del botón "Clientes"
        SwingUtilities.invokeLater(() -> { // Ejecuta el código en el hilo de despacho de eventos
            JFrame frame = new JFrame("Formulario Carros"); // Crea una ventana con el título "Formulario carros"
            Formulario_Carro panel = new Formulario_Carro(); // Crea una instancia del panel Formulario_Carro
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Establece la operación de cierre de la ventana
            frame.setSize(1100, 500); // Establece el tamaño de la ventana
            frame.setContentPane(panel); // Establece el contenido de la ventana con el panel
            frame.setVisible(true); // Hace visible la ventana
        });
    }

    private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {
        // Código para manejar la acción del botón "Salir"
        System.exit(0);
    }

    private void jTablePrincipalMousePressed(java.awt.event.MouseEvent evt) {
        int selectedRow = jTablePrincipal.getSelectedRow();
        if (selectedRow != -1) {
            // Obtener el nombre de las columnas de la tabla
            String columnName = jTablePrincipal.getColumnName(0);

            // Verificar si la tabla muestra clientes, empleados o carros
            if (columnName.equals("Identificacion") && jTablePrincipal.getColumnCount() == 4) {
                // Asumiendo que la identificación del cliente está en la primera columna
                String idCliente = jTablePrincipal.getValueAt(selectedRow, 0).toString();
                jTextFieldIdCliente.setText(idCliente);
            } else if (columnName.equals("Identificacion") && jTablePrincipal.getColumnCount() == 3) {
                // Asumiendo que la identificación del empleado está en la primera columna
                String idEmpleado = jTablePrincipal.getValueAt(selectedRow, 0).toString();
                jTextFieldIdEmpleado.setText(idEmpleado);
            } else if (columnName.equals("Placa")) {
                // Asumiendo que la placa del carro está en la primera columna
                String placa = jTablePrincipal.getValueAt(selectedRow, 0).toString();
                jTextFieldPlaca.setText(placa);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormularioPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormularioPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormularioPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormularioPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormularioPrincipal().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButtonBorrar;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonCarro;
    private javax.swing.JButton jButtonClientes;
    private javax.swing.JButton jButtonEmpleado;
    private javax.swing.JButton jButtonModificar;
    private javax.swing.JButton jButtonReservar;
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelNoDias;
    private javax.swing.JLabel jLabelPlaca;
    private javax.swing.JLabel jLabelPrestamo;
    private javax.swing.JLabel jLabelReserva;
    private javax.swing.JLabel jLabelidEmpleado;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTablePrincipal;
    private javax.swing.JTextField jTextFieldIdCliente;
    private javax.swing.JTextField jTextFieldIdEmpleado;
    private javax.swing.JTextField jTextFieldNoDias;
    private javax.swing.JTextField jTextFieldPlaca;
    private javax.swing.JTextField jTextFieldPrestamo;
    private javax.swing.JButton jButtonBuscarCliente;
    private javax.swing.JButton jButtonBuscarPlaca;
    private javax.swing.JButton jButtonBuscarEmpleado;

    // End of variables declaration                   
}
